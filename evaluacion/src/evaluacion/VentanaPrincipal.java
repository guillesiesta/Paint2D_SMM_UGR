/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package evaluacion;

import static evaluacion.SelectorColor.RET_OK;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.io.File;
import static java.lang.Math.*;
import static java.lang.Math.abs;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.gui.imagen.UmbralizacionOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;

/**
 *
 * @author guillesiesta
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private BufferedImage imgOriginal;
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        this.setSize(1300, 700);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public VentanaInterna getVentanaInterna(){
        VentanaInterna vi;
        vi = (VentanaInterna)escritorio.getSelectedFrame();
        return vi;
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jToolBar1 = new javax.swing.JToolBar();
        jButtonNuevo = new javax.swing.JButton();
        jButtonAbrir = new javax.swing.JButton();
        jButtonGuardar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jToggleButtonPunto = new javax.swing.JToggleButton();
        jToggleButtonLinea = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButtonRectangulo = new javax.swing.JToggleButton();
        jToggleButton5 = new javax.swing.JToggleButton();
        jToggleButtonCirculo = new javax.swing.JToggleButton();
        seleccion = new javax.swing.JToggleButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jPanelColor = new javax.swing.JPanel();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jPanelColorRelleno = new javax.swing.JPanel();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jSpinnerGrosor = new javax.swing.JSpinner();
        jComboBoxLinea = new javax.swing.JComboBox();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jToggleButtonRelleno = new javax.swing.JToggleButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        jToggleButtonTransparencia = new javax.swing.JToggleButton();
        jSliderTransparencia = new javax.swing.JSlider();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jToggleButtonAlisar = new javax.swing.JToggleButton();
        escritorio = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        brillo = new javax.swing.JSlider();
        filtro = new javax.swing.JComboBox();
        negativo = new javax.swing.JButton();
        contraste = new javax.swing.JButton();
        iluminacion = new javax.swing.JButton();
        oscurecimiento = new javax.swing.JButton();
        seno = new javax.swing.JButton();
        sumbral = new javax.swing.JSlider();
        acerca = new javax.swing.JButton();
        aleja = new javax.swing.JButton();
        srotar = new javax.swing.JSlider();
        duplicarImagen = new javax.swing.JButton();
        jButtonEscalaGrises = new javax.swing.JButton();
        jButtonSepia = new javax.swing.JButton();
        jToolBar3 = new javax.swing.JToolBar();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemNuevo = new javax.swing.JMenuItem();
        jMenuItemAbrir = new javax.swing.JMenuItem();
        jMenuItemGuardar = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        jButtonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        jButtonNuevo.setFocusable(false);
        jButtonNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuevoActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonNuevo);

        jButtonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        jButtonAbrir.setFocusable(false);
        jButtonAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAbrirActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonAbrir);

        jButtonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        jButtonGuardar.setFocusable(false);
        jButtonGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonGuardar);
        jToolBar1.add(jSeparator1);

        buttonGroup1.add(jToggleButtonPunto);
        jToggleButtonPunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        jToggleButtonPunto.setFocusable(false);
        jToggleButtonPunto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonPunto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonPunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPuntoActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButtonPunto);

        buttonGroup1.add(jToggleButtonLinea);
        jToggleButtonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        jToggleButtonLinea.setFocusable(false);
        jToggleButtonLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonLineaActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButtonLinea);

        buttonGroup1.add(jToggleButton3);
        jToggleButton3.setText("LC");
        jToggleButton3.setFocusable(false);
        jToggleButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButton3);

        buttonGroup1.add(jToggleButtonRectangulo);
        jToggleButtonRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        jToggleButtonRectangulo.setFocusable(false);
        jToggleButtonRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRectanguloActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButtonRectangulo);

        buttonGroup1.add(jToggleButton5);
        jToggleButton5.setText("RD");
        jToggleButton5.setFocusable(false);
        jToggleButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButton5);

        buttonGroup1.add(jToggleButtonCirculo);
        jToggleButtonCirculo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        jToggleButtonCirculo.setFocusable(false);
        jToggleButtonCirculo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonCirculo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonCirculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonCirculoActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButtonCirculo);

        seleccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        seleccion.setFocusable(false);
        seleccion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        seleccion.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        seleccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionActionPerformed(evt);
            }
        });
        jToolBar1.add(seleccion);
        jToolBar1.add(jSeparator3);

        jPanelColor.setBackground(new java.awt.Color(1, 1, 1));
        jPanelColor.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanelColor.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanelColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelColorMouseClicked(evt);
            }
        });
        jToolBar1.add(jPanelColor);
        jToolBar1.add(jSeparator4);

        jPanelColorRelleno.setBackground(new java.awt.Color(254, 254, 254));
        jPanelColorRelleno.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanelColorRelleno.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanelColorRelleno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelColorRellenoMouseClicked(evt);
            }
        });
        jToolBar1.add(jPanelColorRelleno);
        jToolBar1.add(jSeparator5);

        jSpinnerGrosor.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        jSpinnerGrosor.setMinimumSize(new java.awt.Dimension(50, 28));
        jSpinnerGrosor.setPreferredSize(new java.awt.Dimension(55, 28));
        jSpinnerGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerGrosorStateChanged(evt);
            }
        });
        jToolBar1.add(jSpinnerGrosor);

        jComboBoxLinea.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tipo Línea", "-------", "_____" }));
        jComboBoxLinea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxLineaItemStateChanged(evt);
            }
        });
        jToolBar1.add(jComboBoxLinea);
        jToolBar1.add(jSeparator6);

        jToggleButtonRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        jToggleButtonRelleno.setFocusable(false);
        jToggleButtonRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRellenoActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButtonRelleno);
        jToolBar1.add(jSeparator7);

        jToggleButtonTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        jToggleButtonTransparencia.setFocusable(false);
        jToggleButtonTransparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonTransparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonTransparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonTransparenciaActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButtonTransparencia);

        jSliderTransparencia.setMaximum(10);
        jSliderTransparencia.setValue(5);
        jSliderTransparencia.setPreferredSize(new java.awt.Dimension(100, 54));
        jToolBar1.add(jSliderTransparencia);
        jToolBar1.add(jSeparator2);

        jToggleButtonAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        jToggleButtonAlisar.setFocusable(false);
        jToggleButtonAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButtonAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButtonAlisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonAlisarActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButtonAlisar);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);
        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        jPanel1.setForeground(new java.awt.Color(254, 254, 254));
        jPanel1.setLayout(new java.awt.GridLayout(2, 0));

        jToolBar2.setRollover(true);

        brillo.setForeground(new java.awt.Color(1, 1, 1));
        brillo.setMaximum(255);
        brillo.setMinimum(-255);
        brillo.setToolTipText("brillo");
        brillo.setValue(0);
        brillo.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo"));
        brillo.setMaximumSize(new java.awt.Dimension(34, 35));
        brillo.setMinimumSize(new java.awt.Dimension(40, 40));
        brillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilloStateChanged(evt);
            }
        });
        brillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brilloFocusGained(evt);
            }
        });
        jToolBar2.add(brillo);

        filtro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione Filtro", "Media", "Binomial", "Enfoque", "Relieve", "laplaciano" }));
        filtro.setMaximumSize(new java.awt.Dimension(50, 27));
        filtro.setMinimumSize(new java.awt.Dimension(20, 27));
        filtro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filtroItemStateChanged(evt);
            }
        });
        jToolBar2.add(filtro);

        negativo.setBackground(new java.awt.Color(1, 1, 1));
        negativo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/resta.png"))); // NOI18N
        negativo.setToolTipText("Negativo");
        negativo.setFocusable(false);
        negativo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        negativo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        negativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativoActionPerformed(evt);
            }
        });
        jToolBar2.add(negativo);

        contraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        contraste.setFocusable(false);
        contraste.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        contraste.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        contraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrasteActionPerformed(evt);
            }
        });
        jToolBar2.add(contraste);

        iluminacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        iluminacion.setFocusable(false);
        iluminacion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        iluminacion.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        iluminacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iluminacionActionPerformed(evt);
            }
        });
        jToolBar2.add(iluminacion);

        oscurecimiento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        oscurecimiento.setFocusable(false);
        oscurecimiento.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        oscurecimiento.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        oscurecimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oscurecimientoActionPerformed(evt);
            }
        });
        jToolBar2.add(oscurecimiento);

        seno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sinusoidal.png"))); // NOI18N
        seno.setFocusable(false);
        seno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        seno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        seno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                senoActionPerformed(evt);
            }
        });
        jToolBar2.add(seno);

        sumbral.setMaximum(255);
        sumbral.setValue(128);
        sumbral.setBorder(javax.swing.BorderFactory.createTitledBorder("Umbralizar"));
        sumbral.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sumbralStateChanged(evt);
            }
        });
        sumbral.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sumbralFocusGained(evt);
            }
        });
        jToolBar2.add(sumbral);

        acerca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        acerca.setFocusable(false);
        acerca.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        acerca.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        acerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acercaActionPerformed(evt);
            }
        });
        jToolBar2.add(acerca);

        aleja.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        aleja.setFocusable(false);
        aleja.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        aleja.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        aleja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alejaActionPerformed(evt);
            }
        });
        jToolBar2.add(aleja);

        srotar.setMaximum(360);
        srotar.setValue(0);
        srotar.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotar"));
        srotar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                srotarStateChanged(evt);
            }
        });
        srotar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                srotarFocusGained(evt);
            }
        });
        jToolBar2.add(srotar);

        duplicarImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/suma.png"))); // NOI18N
        duplicarImagen.setToolTipText("Duplicar Imagen");
        duplicarImagen.setFocusable(false);
        duplicarImagen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        duplicarImagen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        duplicarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicarImagenActionPerformed(evt);
            }
        });
        jToolBar2.add(duplicarImagen);

        jButtonEscalaGrises.setText("Escala de Grises");
        jButtonEscalaGrises.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonEscalaGrises.setFocusable(false);
        jButtonEscalaGrises.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonEscalaGrises.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonEscalaGrises.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEscalaGrisesActionPerformed(evt);
            }
        });
        jToolBar2.add(jButtonEscalaGrises);

        jButtonSepia.setText("Sepia");
        jButtonSepia.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonSepia.setFocusable(false);
        jButtonSepia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSepia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSepiaActionPerformed(evt);
            }
        });
        jToolBar2.add(jButtonSepia);

        jPanel1.add(jToolBar2);

        jToolBar3.setRollover(true);

        jButton2.setText("jButton2");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar3.add(jButton2);

        jPanel1.add(jToolBar3);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jMenu1.setText("Archivo");

        jMenuItemNuevo.setText("Nuevo");
        jMenuItemNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemNuevo);

        jMenuItemAbrir.setText("Abrir");
        jMenuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemAbrir);

        jMenuItemGuardar.setText("Guardar");
        jMenu1.add(jMenuItemGuardar);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ver");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuevoActionPerformed
        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        vi.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(300,300,BufferedImage.TYPE_INT_RGB);
        
         /*Codigo para que la imagen inicial salga en blanco*/
        Graphics2D  graphics = img.createGraphics();
        graphics.setPaint ( new Color ( 255, 255, 255 ) );
        graphics.fillRect ( 0, 0, img.getWidth(), img.getHeight() );
        /*Codigo para que la imagen inicial salga en blanco*/
        
        vi.lienzo2D1.setImage(img);
    }//GEN-LAST:event_jButtonNuevoActionPerformed

    private void jMenuItemNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNuevoActionPerformed
        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        vi.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(300,300,BufferedImage.TYPE_INT_RGB);
        
         /*Codigo para que la imagen inicial salga en blanco*/
        Graphics2D  graphics = img.createGraphics();
        graphics.setPaint ( new Color ( 255, 255, 255 ) );
        graphics.fillRect ( 0, 0, img.getWidth(), img.getHeight() );
        /*Codigo para que la imagen inicial salga en blanco*/
        
        vi.lienzo2D1.setImage(img);
    }//GEN-LAST:event_jMenuItemNuevoActionPerformed

    private void jToggleButtonPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonPuntoActionPerformed
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            ///this.labelherramienta.setText("Lápiz");
            this.getVentanaInterna().lienzo2D1.setHerramienta(0);
        }else{
            JOptionPane.showMessageDialog(null, "No hay ventana abierta!");
        }
    }//GEN-LAST:event_jToggleButtonPuntoActionPerformed

    private void jToggleButtonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonLineaActionPerformed
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            //this.labelherramienta.setText("Línea");
            this.getVentanaInterna().lienzo2D1.setHerramienta(1);
        }else{
             JOptionPane.showMessageDialog(null, "No hay ventana abierta!");
        }
    }//GEN-LAST:event_jToggleButtonLineaActionPerformed

    private void jToggleButtonRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRectanguloActionPerformed
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            //this.labelherramienta.setText("Rectángulo");
            this.getVentanaInterna().lienzo2D1.setHerramienta(2);
        }else{
             JOptionPane.showMessageDialog(null, "No hay ventana abierta!");
        }
    }//GEN-LAST:event_jToggleButtonRectanguloActionPerformed

    private void jToggleButtonCirculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonCirculoActionPerformed
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            //this.labelherramienta.setText("Rectángulo");
            this.getVentanaInterna().lienzo2D1.setHerramienta(3);
        }else{
             JOptionPane.showMessageDialog(null, "No hay ventana abierta!");
        }
    }//GEN-LAST:event_jToggleButtonCirculoActionPerformed

    private void seleccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionActionPerformed
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            if(this.seleccion.isSelected()){
                this.getVentanaInterna().lienzo2D1.setEditar(true);
            }else{
                this.getVentanaInterna().lienzo2D1.setEditar(false);
            }
        }else{
            JOptionPane.showMessageDialog(null, "No hay ventana abierta!");
        }
    }//GEN-LAST:event_seleccionActionPerformed

    private void jToggleButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton5ActionPerformed
         VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            //this.labelherramienta.setText("RectánguloRedondo");
            this.getVentanaInterna().lienzo2D1.setHerramienta(4);
        }else{
             JOptionPane.showMessageDialog(null, "No hay ventana abierta!");
        }
    }//GEN-LAST:event_jToggleButton5ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            //this.labelherramienta.setText("RectánguloRedondo");
            this.getVentanaInterna().lienzo2D1.setHerramienta(5);
        }else{
             JOptionPane.showMessageDialog(null, "No hay ventana abierta!");
        }
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        VentanaInterna vi=(VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            
            JFileChooser dlg = new JFileChooser();
            
            //Formatos para almacenar
            FileFilter filter = new FileNameExtensionFilter(".jpg","jpg");
            FileFilter filter1 = new FileNameExtensionFilter(".png","png");
            FileFilter filter2 = new FileNameExtensionFilter(".bmp","bmp");
            FileFilter filter3 = new FileNameExtensionFilter(".gif","gif");
            dlg.addChoosableFileFilter(filter);
            dlg.addChoosableFileFilter(filter1);
            dlg.addChoosableFileFilter(filter2);
            dlg.addChoosableFileFilter(filter3);
            
            
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    BufferedImage img = vi.lienzo2D1.getImage(true);
                    if (img != null) {
                        File f = dlg.getSelectedFile();
                        String extension = dlg.getFileFilter().getDescription();

                        //Intento crear un nuevo archivo
                        File f_end = new File(f.getAbsolutePath()+extension);                        
                        ImageIO.write(img, extension.substring(1), f_end);
                        vi.setTitle(f_end.getName());
                    }
                }catch (Exception ex) {
                    System.err.println("Error al guardar la imagen");
                }
            }
        }
    }//GEN-LAST:event_jButtonGuardarActionPerformed

    private void jPanelColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelColorMouseClicked
        SelectorColor dialog = new SelectorColor(new javax.swing.JFrame(), true);
        dialog.setVisible(true);
        if(dialog.getReturnStatus()==RET_OK){
            jPanelColor.setBackground(dialog.getReturnColor());
            this.getVentanaInterna().lienzo2D1.setColor(dialog.getReturnColor());            
        }
    }//GEN-LAST:event_jPanelColorMouseClicked

    private void jPanelColorRellenoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelColorRellenoMouseClicked
        SelectorColor dialog = new SelectorColor(new javax.swing.JFrame(), true);
        dialog.setVisible(true);
        if(dialog.getReturnStatus()==RET_OK){
            jPanelColorRelleno.setBackground(dialog.getReturnColor());
            this.getVentanaInterna().lienzo2D1.setColorRelleno(dialog.getReturnColor());
        }
    }//GEN-LAST:event_jPanelColorRellenoMouseClicked

    private void jSpinnerGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerGrosorStateChanged
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            int valor = (int)jSpinnerGrosor.getModel().getValue();
            int linea = jComboBoxLinea.getSelectedIndex();
            if(linea==1){
                BasicStroke t;
                float patronDiscontinuidad[] = {10.0f, 10.0f};
                t = new BasicStroke(valor,
                    BasicStroke.CAP_ROUND,
                    BasicStroke.JOIN_MITER, 1.0f,
                    patronDiscontinuidad, 0.0f);
                this.getVentanaInterna().lienzo2D1.setStroke(t);
            }else{
                this.getVentanaInterna().lienzo2D1.setStrokeAtr(valor);
            }
        }else{
            JOptionPane.showMessageDialog(null, "No hay ventana abierta!");
        }
    }//GEN-LAST:event_jSpinnerGrosorStateChanged

    private void jComboBoxLineaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxLineaItemStateChanged
        int linea = jComboBoxLinea.getSelectedIndex();
        int valor;
        valor = (int)jSpinnerGrosor.getModel().getValue();
        
        switch(linea){
            case 0:
                this.getVentanaInterna().lienzo2D1.setStrokeAtr(valor);
                break;
            case 1:
                BasicStroke t;
                float patronDiscontinuidad[] = {10.0f, 10.0f};
                t = new BasicStroke(valor,
                    BasicStroke.CAP_ROUND,
                    BasicStroke.JOIN_MITER, 1.0f,
                    patronDiscontinuidad, 0.0f);
                this.getVentanaInterna().lienzo2D1.setStroke(t);
                break;
            case 2:
                this.getVentanaInterna().lienzo2D1.setStrokeAtr(valor);
                break;
        }
    }//GEN-LAST:event_jComboBoxLineaItemStateChanged

    private void jToggleButtonAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonAlisarActionPerformed
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            if(this.jToggleButtonAlisar.isSelected()){
                this.getVentanaInterna().lienzo2D1.setAlisar(true);
            }else{
                this.getVentanaInterna().lienzo2D1.setAlisar(false);
            }
        }else{
            JOptionPane.showMessageDialog(null, "No hay ventana abierta!");
        }
    }//GEN-LAST:event_jToggleButtonAlisarActionPerformed

    private void jToggleButtonRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRellenoActionPerformed
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            if(this.jToggleButtonRelleno.isSelected()){
                this.getVentanaInterna().lienzo2D1.setRelleno(true);
            }else{
                this.getVentanaInterna().lienzo2D1.setRelleno(false);
            }
        }else{
             JOptionPane.showMessageDialog(null, "No hay ventana abierta!");
        }
    }//GEN-LAST:event_jToggleButtonRellenoActionPerformed

    private void jToggleButtonTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonTransparenciaActionPerformed
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            if(this.jToggleButtonTransparencia.isSelected()){
                
                jSliderTransparencia.setEnabled(false);
                int valortrans = this.jSliderTransparencia.getValue();
                float trans =0.0f;
                switch(valortrans){
                    case 0:
                        trans = 0.0f;
                        break;
                    case 1:
                        trans = 0.1f;
                        break;
                    case 2:
                        trans =0.2f;
                        break;
                    case 3:
                        trans = 0.3f;
                        break;
                    case 4:
                        trans = 0.4f;
                        break;
                    case 5:
                        trans = 0.5f;
                        break;
                    case 6:
                        trans = 0.6f;
                        break;
                    case 7:
                        trans = 0.7f;
                        break;
                    case 8:
                        trans = 0.8f;
                        break;
                    case 9:
                        trans =0.9f;
                        break;
                    case 10:
                        trans = 1.0f;
                        break;
                        
                }//fin del switch
                
                this.getVentanaInterna().lienzo2D1.setTransparencia(true,trans);
            }else{
                jSliderTransparencia.setEnabled(true);
                this.getVentanaInterna().lienzo2D1.setTransparencia(false, 1.0f);
            }
        }/*else{
            JOptionPane.showMessageDialog(null, "No hay ventana abierta!");
        }*/
    }//GEN-LAST:event_jToggleButtonTransparenciaActionPerformed

    private void jButtonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAbrirActionPerformed
       JFileChooser dlg = new JFileChooser();
        
        //Formatos para abrir
        FileFilter filter = new FileNameExtensionFilter(".jpg","jpg");
        FileFilter filter1 = new FileNameExtensionFilter(".png","png");
        FileFilter filter2 = new FileNameExtensionFilter(".bmp","bmp");
        FileFilter filter3 = new FileNameExtensionFilter(".gif","gif");
        FileFilter filter4 = new FileNameExtensionFilter(".avi","avi");
        FileFilter filter5 = new FileNameExtensionFilter(".au","au");
        FileFilter filter6 = new FileNameExtensionFilter(".wav","wav");
        dlg.addChoosableFileFilter(filter);
        dlg.addChoosableFileFilter(filter1);
        dlg.addChoosableFileFilter(filter2);
        dlg.addChoosableFileFilter(filter3);
        dlg.addChoosableFileFilter(filter4);
        dlg.addChoosableFileFilter(filter5);
        dlg.addChoosableFileFilter(filter6);
            
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                
                //extension del file
                String name = f.getName();
                String extension = name.substring(name.lastIndexOf("."));
                //System.out.println(""+extension);
                
                //Si es Video
                if(extension == ".avi"){
                    /*URL mediaURL = dlg.getSelectedFile().toURL();
                    reproductor vv = new reproductor();
                    vv.txturl.setText(f.getName());
                    Dimension dp = new Dimension(vv.pantalla.getWidth(), vv.pantalla.getHeight());
                    //se crea el reproductor pasando como parametros
                    // el archivo y dimensiones
                    vv.mediaPanel = new videopanel( mediaURL ,dp );           
                    vv.pantalla.add(vv.mediaPanel);            
                    vv.pantalla.setVisible(true);
                    //se obtiene dimensiones del contenedor de los controles
                    // y se pasa como parametro para crear los controles de reproduccion
                    Dimension d = new Dimension(vv.control.getWidth(),vv.control.getHeight());
                    vv.control.add(vv.mediaPanel.controles(d));            
                    vv.control.setVisible(true);
                    this.escritorio.add(vv);*/
                }
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna();
                vi.lienzo2D1.setImage(img);
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            }catch(Exception ex){
                System.err.println("Error al leer la imagen");
            }   
        }
    }//GEN-LAST:event_jButtonAbrirActionPerformed

    private void jMenuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        
        //Formatos para abrir
        FileFilter filter = new FileNameExtensionFilter(".jpg","jpg");
        FileFilter filter1 = new FileNameExtensionFilter(".png","png");
        FileFilter filter2 = new FileNameExtensionFilter(".bmp","bmp");
        FileFilter filter3 = new FileNameExtensionFilter(".gif","gif");
        dlg.addChoosableFileFilter(filter);
        dlg.addChoosableFileFilter(filter1);
        dlg.addChoosableFileFilter(filter2);
        dlg.addChoosableFileFilter(filter3);
            
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna();
                vi.lienzo2D1.setImage(img);
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            }catch(Exception ex){
                System.err.println("Error al leer la imagen");
            }   
        }
    }//GEN-LAST:event_jMenuItemAbrirActionPerformed

    private void brilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilloStateChanged
        // TODO add your handling code here:
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        try{
            RescaleOp rop = new RescaleOp(1.0F, brillo.getValue(), null);
            BufferedImage imgdest = rop.filter(imgOriginal, null);
            vi.lienzo2D1.setImage(imgdest);
            vi.lienzo2D1.repaint();
        } catch(IllegalArgumentException e){
            System.err.println(e.getLocalizedMessage());
        }
    }//GEN-LAST:event_brilloStateChanged

    private void brilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloFocusGained
        // TODO add your handling code here:
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            imgOriginal=vi.lienzo2D1.getImage();
        }
    }//GEN-LAST:event_brilloFocusGained

    private void filtroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filtroItemStateChanged

        int i = filtro.getSelectedIndex();
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();

        switch(i){

            case 1:
            if(vi!=null){
                BufferedImage imgSource = vi.lienzo2D1.getImage();
                try{

                    float m[]=new float[49];
                    for(int c=0;c<49;c++){
                        m[c]=1.0f/49.0f;
                    }
                    float m2[]=new float[25];
                    for(int c=0;c<25;c++){
                        m2[c]=1.0f/25.0f;
                    }
                    Kernel k = new Kernel(5,5,m2);
                    ConvolveOp cop = new ConvolveOp(k);

                    /*Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                    ConvolveOp cop = new ConvolveOp(k,ConvolveOp.EDGE_NO_OP,null);
                    */
                    BufferedImage imgdest = cop.filter(imgSource, null);
                    vi.lienzo2D1.setImage(imgdest);
                    vi.lienzo2D1.repaint();

                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }

            }//fin if
            break;

            case 2:
            if(vi!=null){
                BufferedImage imgSource = vi.lienzo2D1.getImage();
                try{

                    Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                    ConvolveOp cop = new ConvolveOp(k,ConvolveOp.EDGE_NO_OP,null);
                    BufferedImage imgdest = cop.filter(imgSource, null);
                    vi.lienzo2D1.setImage(imgdest);
                    vi.lienzo2D1.repaint();

                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }

            }//fin if
            break;

            case 3:
            if(vi!=null){
                BufferedImage imgSource = vi.lienzo2D1.getImage();
                try{

                    Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                    ConvolveOp cop = new ConvolveOp(k,ConvolveOp.EDGE_NO_OP,null);
                    BufferedImage imgdest = cop.filter(imgSource, null);
                    vi.lienzo2D1.setImage(imgdest);
                    vi.lienzo2D1.repaint();

                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }

            }//fin if
            break;

            case 4:
            if(vi!=null){
                BufferedImage imgSource = vi.lienzo2D1.getImage();
                try{

                    Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                    ConvolveOp cop = new ConvolveOp(k,ConvolveOp.EDGE_NO_OP,null);
                    BufferedImage imgdest = cop.filter(imgSource, null);
                    vi.lienzo2D1.setImage(imgdest);
                    vi.lienzo2D1.repaint();

                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }

            }//fin if
            break;

            case 5:
            if(vi!=null){
                BufferedImage imgSource = vi.lienzo2D1.getImage();
                try{

                    Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                    ConvolveOp cop = new ConvolveOp(k,ConvolveOp.EDGE_NO_OP,null);
                    BufferedImage imgdest = cop.filter(imgSource, null);
                    vi.lienzo2D1.setImage(imgdest);
                    vi.lienzo2D1.repaint();

                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }

            }//fin if
            break;

        }

    }//GEN-LAST:event_filtroItemStateChanged

    private void contrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrasteActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());

        if (vi != null) {
            BufferedImage imgSource = vi.lienzo2D1.getImage();
            if(imgSource!=null){
                try{
                    LookupTable slt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
                    LookupOp lop = new LookupOp(slt, null);
                    BufferedImage imgDest = lop.filter(imgSource,imgSource);
                    vi.lienzo2D1.setImage(imgDest);
                    vi.lienzo2D1.repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_contrasteActionPerformed

    private void iluminacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iluminacionActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());

        if (vi != null) {
            BufferedImage imgSource = vi.lienzo2D1.getImage();
            if(imgSource!=null){
                try{
                    LookupTable slt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);
                    LookupOp lop = new LookupOp(slt, null);
                    BufferedImage imgDest = lop.filter(imgSource,imgSource);
                    vi.lienzo2D1.setImage(imgDest);
                    vi.lienzo2D1.repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_iluminacionActionPerformed

    private void oscurecimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oscurecimientoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());

        if (vi != null) {
            BufferedImage imgSource = vi.lienzo2D1.getImage();
            if(imgSource!=null){
                try{
                    LookupTable slt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
                    LookupOp lop = new LookupOp(slt, null);
                    BufferedImage imgDest = lop.filter(imgSource,imgSource);
                    vi.lienzo2D1.setImage(imgDest);
                    vi.lienzo2D1.repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_oscurecimientoActionPerformed

    private void senoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_senoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo2D1.getImage();
            try{
                LookupTable lt = this.seno((180.0/255.0));
                LookupOp lop = new LookupOp(lt, null);
                BufferedImage imgDest = lop.filter(imgSource,imgSource);
                vi.lienzo2D1.setImage(imgDest);
                vi.lienzo2D1.repaint();
            }catch(Exception e){
                System.err.println("Error. No hace el seno");
            }
        }
    }//GEN-LAST:event_senoActionPerformed

    private void sumbralStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sumbralStateChanged
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage imgSource = vi.lienzo2D1.getImage();
            UmbralizacionOp umbral = new UmbralizacionOp(sumbral.getValue());
            BufferedImage imgDest = umbral.filter(imgOriginal,null);
            vi.lienzo2D1.setImage(imgDest);
            vi.lienzo2D1.repaint();
        }
    }//GEN-LAST:event_sumbralStateChanged

    private void sumbralFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sumbralFocusGained
        // TODO add your handling code here:
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            imgOriginal=vi.lienzo2D1.getImage();
        }
    }//GEN-LAST:event_sumbralFocusGained

    private void srotarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_srotarStateChanged

        AffineTransform atrans;
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        atrans = AffineTransform.getRotateInstance(Math.toRadians(srotar.getValue()),imgOriginal.getWidth()/2,imgOriginal.getHeight()/2);
        try{
            AffineTransformOp atransop = new AffineTransformOp(atrans,
                AffineTransformOp.TYPE_BILINEAR);
            BufferedImage imgDest = atransop.filter( imgOriginal, null);
            vi.lienzo2D1.setImage(imgDest);
            vi.lienzo2D1.repaint();
        }catch(Exception e){
            System.err.println("Error. No rota");
        }

    }//GEN-LAST:event_srotarStateChanged

    private void srotarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_srotarFocusGained
        // TODO add your handling code here:
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            imgOriginal=vi.lienzo2D1.getImage();
        }
    }//GEN-LAST:event_srotarFocusGained

    private void acercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acercaActionPerformed
        AffineTransform atrans = AffineTransform.getScaleInstance(1.25,1.25);
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();

        if (vi != null) {
            BufferedImage imgSource = vi.lienzo2D1.getImage();
            try{
                AffineTransformOp atranstop = new AffineTransformOp(atrans,
                    AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgDest = atranstop.filter( imgSource, null);
                vi.lienzo2D1.setImage(imgDest);
                vi.lienzo2D1.repaint();
            }catch(Exception e){
                System.err.println("Error. No acerca");
            }
        }
    }//GEN-LAST:event_acercaActionPerformed

    private void alejaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alejaActionPerformed
        // TODO add your handling code here:
        AffineTransform atrans = AffineTransform.getScaleInstance(0.75,0.75);
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();

        if (vi != null) {
            BufferedImage imgSource = vi.lienzo2D1.getImage();
            try{
                AffineTransformOp atranstop = new AffineTransformOp(atrans,
                    AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgDest = atranstop.filter( imgSource, null);
                vi.lienzo2D1.setImage(imgDest);
                vi.lienzo2D1.repaint();
            }catch(Exception e){
                System.err.println("Error. No aleja");
            }
        }
    }//GEN-LAST:event_alejaActionPerformed

    private void duplicarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicarImagenActionPerformed
              
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        if(vi!=null){
            VentanaInterna vin = new VentanaInterna();
            escritorio.add(vin);
            vin.setVisible(true);
            BufferedImage imgSource = vi.lienzo2D1.getImage();
            vin.lienzo2D1.setImage(imgSource);
        }        
    }//GEN-LAST:event_duplicarImagenActionPerformed

    private void negativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativoActionPerformed
    
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        BufferedImage foto = vi.lienzo2D1.getImage();
        int r,g,b;
        Color color;
        for(int i=0;i<foto.getWidth();i++){
             for(int j=0;j<foto.getHeight();j++){
                   //se obtiene el color del pixel
                   color = new Color(foto.getRGB(i, j));
                   //se extraen los valores RGB
                   r = color.getRed();
                   g = color.getGreen();
                   b = color.getBlue();
                   //se coloca en la nueva imagen con los valores invertidos
                   foto.setRGB(i, j, new Color(255-r,255-g,255-b).getRGB());                                                                    
             }
        }
        vi.lienzo2D1.setImage(foto);
        vi.lienzo2D1.repaint();
        
    }//GEN-LAST:event_negativoActionPerformed

    private void jButtonEscalaGrisesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEscalaGrisesActionPerformed
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        BufferedImage foto = vi.lienzo2D1.getImage();
        int r,g,b, colorSRGB, media;
        Color color;
        for(int i=0;i<foto.getWidth();i++){
             for(int j=0;j<foto.getHeight();j++){
                   //se obtiene el color del pixel
                   color = new Color(foto.getRGB(i, j));
                   //se extraen los valores RGB
                   r = color.getRed();
                   g = color.getGreen();
                   b = color.getBlue();
                   //calculamos la media
                   media = ((r+g+b)/3);
                   //Cambiamos a formato sRGB
                   colorSRGB=(media << 16) | (media << 8) | media;
                   //se coloca en la nueva imagen con los valores invertidos
                   foto.setRGB(i, j, colorSRGB);                                                                    
             }
        }
        vi.lienzo2D1.setImage(foto);
        vi.lienzo2D1.repaint();
    }//GEN-LAST:event_jButtonEscalaGrisesActionPerformed

    private void jButtonSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSepiaActionPerformed
        VentanaInterna vi =(VentanaInterna)escritorio.getSelectedFrame();
        BufferedImage foto = vi.lienzo2D1.getImage();
        int r,g,b;
        Color color;
        int sepiaDepth = 20;
        for(int i=0;i<foto.getWidth();i++){
             for(int j=0;j<foto.getHeight();j++){
                   //se obtiene el color del pixel
                   color = new Color(foto.getRGB(i, j));
                   //se extraen los valores RGB
                   r = color.getRed();
                   g = color.getGreen();
                   b = color.getBlue();
                   //Algoritmo
                   int gry = (r + g + b) / 3;
                   r = g = b = gry;
                   r = r + (sepiaDepth * 2);
                   g = g + sepiaDepth;

                   if (r>255) r=255;
                   if (g>255) g=255;
                   if (b>255) b=255;
                   
                    b-= 10;//intensidad del sepia

                   // normalize if out of bounds
                   if (b<0) b=0;
                   if (b>255) b=255;
                   
                   //se coloca en la nueva imagen
                   foto.setRGB(i, j, new Color(r,g,b).getRGB());                                                                    
             }
        }
        vi.lienzo2D1.setImage(foto);
        vi.lienzo2D1.repaint();
    }//GEN-LAST:event_jButtonSepiaActionPerformed

    /**
     * @param args the command line arguments
     */
    
    /*FUNCION SENO*/
     public LookupTable seno(double w){
        double cte = (255.0 / abs(PI/2)) ; // Cte de normalización
         byte bt[] = new byte[256];
         
         for (int t=0; t<255; t++){
           bt[t] = (byte)(cte * abs(Math.sin(Math.toRadians(w * t))));
         }
        ByteLookupTable slt = new ByteLookupTable(0,bt);
        return slt;
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acerca;
    private javax.swing.JButton aleja;
    private javax.swing.JSlider brillo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton contraste;
    private javax.swing.JButton duplicarImagen;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JComboBox filtro;
    private javax.swing.JButton iluminacion;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonAbrir;
    private javax.swing.JButton jButtonEscalaGrises;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JButton jButtonNuevo;
    private javax.swing.JButton jButtonSepia;
    private javax.swing.JComboBox jComboBoxLinea;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemAbrir;
    private javax.swing.JMenuItem jMenuItemGuardar;
    private javax.swing.JMenuItem jMenuItemNuevo;
    private javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanelColor;
    public javax.swing.JPanel jPanelColorRelleno;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JSlider jSliderTransparencia;
    private javax.swing.JSpinner jSpinnerGrosor;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton5;
    private javax.swing.JToggleButton jToggleButtonAlisar;
    private javax.swing.JToggleButton jToggleButtonCirculo;
    private javax.swing.JToggleButton jToggleButtonLinea;
    private javax.swing.JToggleButton jToggleButtonPunto;
    private javax.swing.JToggleButton jToggleButtonRectangulo;
    private javax.swing.JToggleButton jToggleButtonRelleno;
    private javax.swing.JToggleButton jToggleButtonTransparencia;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JButton negativo;
    private javax.swing.JButton oscurecimiento;
    private javax.swing.JToggleButton seleccion;
    private javax.swing.JButton seno;
    private javax.swing.JSlider srotar;
    private javax.swing.JSlider sumbral;
    // End of variables declaration//GEN-END:variables
}
